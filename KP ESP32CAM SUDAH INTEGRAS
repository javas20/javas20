#include <esp_camera.h>
#include <WiFi.h>
#include <WebServer.h>

// Wi-Fi credentials
const char* ssid = "AndroidAP4219";     // Replace with your Wi-Fi SSID
const char* password = "wwwwwwww"; // Replace with your Wi-Fi password

// Pin definitions for serial communication
#define TX_PIN 1  // TX to ESP32 RX (GPIO 16)
#define RX_PIN 3  // RX to ESP32 TX (GPIO 17)

// Camera configuration pins
#define PWDN_GPIO_NUM    32
#define RESET_GPIO_NUM   -1
#define XCLK_GPIO_NUM    0
#define SIOD_GPIO_NUM    26
#define SIOC_GPIO_NUM    27
#define Y9_GPIO_NUM      35
#define Y8_GPIO_NUM      34
#define Y7_GPIO_NUM      39
#define Y6_GPIO_NUM      36
#define Y5_GPIO_NUM      21
#define Y4_GPIO_NUM      19
#define Y3_GPIO_NUM      18
#define Y2_GPIO_NUM      5
#define VSYNC_GPIO_NUM   25
#define HREF_GPIO_NUM    23
#define PCLK_GPIO_NUM    22

WebServer server(81); // Web server on port 81

// Global camera configuration
camera_config_t camera_config;

void setup() {
  // Initialize serial communication with ESP32
  Serial.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN);

  // Camera configuration
  camera_config.ledc_channel = LEDC_CHANNEL_0;
  camera_config.ledc_timer = LEDC_TIMER_0;
  camera_config.pin_d0 = Y2_GPIO_NUM;
  camera_config.pin_d1 = Y3_GPIO_NUM;
  camera_config.pin_d2 = Y4_GPIO_NUM;
  camera_config.pin_d3 = Y5_GPIO_NUM;
  camera_config.pin_d4 = Y6_GPIO_NUM;
  camera_config.pin_d5 = Y7_GPIO_NUM;
  camera_config.pin_d6 = Y8_GPIO_NUM;
  camera_config.pin_d7 = Y9_GPIO_NUM;
  camera_config.pin_xclk = XCLK_GPIO_NUM;
  camera_config.pin_pclk = PCLK_GPIO_NUM;
  camera_config.pin_vsync = VSYNC_GPIO_NUM;
  camera_config.pin_href = HREF_GPIO_NUM;
  camera_config.pin_sscb_sda = SIOD_GPIO_NUM;
  camera_config.pin_sscb_scl = SIOC_GPIO_NUM;
  camera_config.pin_pwdn = PWDN_GPIO_NUM;
  camera_config.pin_reset = RESET_GPIO_NUM;
  camera_config.xclk_freq_hz = 20000000;
  camera_config.pixel_format = PIXFORMAT_GRAYSCALE; // Default to grayscale for line detection
  camera_config.frame_size = FRAMESIZE_QVGA;   // 320x240
  camera_config.jpeg_quality = 15;
  camera_config.fb_count = 2;

  // Initialize camera
  esp_err_t err = esp_camera_init(&camera_config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x\n", err);
    while (true); // Halt if camera fails
  }
  Serial.println("Camera initialized");

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
  Serial.print("RSSI: ");
  Serial.println(WiFi.RSSI());

  // Start the web server
  server.on("/stream", handleStream);
  server.begin();
  Serial.println("Web server started");
}

void handleStream() {
  Serial.println("Stream requested");

  // Switch to JPEG format for streaming
  esp_err_t err = esp_camera_deinit();
  if (err != ESP_OK) {
    Serial.printf("Camera deinit failed with error 0x%x\n", err);
    return;
  }
  camera_config.pixel_format = PIXFORMAT_JPEG;
  err = esp_camera_init(&camera_config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed for JPEG with error 0x%x\n", err);
    return;
  }

  camera_fb_t * fb = NULL;
  char * part_buf[64];
  static const char* _STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=123456789000000000000987654321";
  static const char* _STREAM_BOUNDARY = "\r\n--123456789000000000000987654321\r\n";
  static const char* _STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n";

  WiFiClient client = server.client();
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: multipart/x-mixed-replace; boundary=123456789000000000000987654321");
  client.println();

  while (client.connected()) {
    fb = esp_camera_fb_get();
    if (!fb) {
      Serial.println("Camera capture failed in stream");
      break;
    }
    char out[128];
    snprintf(out, sizeof(out), _STREAM_PART, fb->len);
    client.write(out);
    client.write((const char *)fb->buf, fb->len);
    client.write(_STREAM_BOUNDARY);
    esp_camera_fb_return(fb);
    delay(20);
  }

  // Switch back to grayscale after streaming stops
  err = esp_camera_deinit();
  if (err != ESP_OK) {
    Serial.printf("Camera deinit failed after streaming with error 0x%x\n", err);
    return;
  }
  camera_config.pixel_format = PIXFORMAT_GRAYSCALE;
  err = esp_camera_init(&camera_config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed for grayscale with error 0x%x\n", err);
    return;
  }
  Serial.println("Switched back to grayscale");
}

void loop() {
  server.handleClient(); // Handle web server clients

  // Capture frame for line detection
  camera_fb_t * fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed in loop");
    return;
  }

  // Since pixel_format is PIXFORMAT_GRAYSCALE, fb->buf is already grayscale
  // Simple line detection (black line on white background)
  int linePosition = -1; // -1 indicates no line found
  int threshold = 50;    // Adjusted threshold for black line (grayscale: 0 = black, 255 = white)
  int sumX = 0, count = 0;

  // Debug: Print some pixel values to check grayscale data
  Serial.print("Sample pixels: ");
  for (int x = 0; x < 5; x++) {
    Serial.print(fb->buf[(fb->height - 1) * fb->width + x]);
    Serial.print(" ");
  }
  Serial.println();

  // Process bottom 20 rows of the image
  for (int y = fb->height - 20; y < fb->height; y++) {
    for (int x = 0; x < fb->width; x++) {
      uint8_t pixel = fb->buf[y * fb->width + x];
      if (pixel < threshold) { // Detect black pixels
        sumX += x;
        count++;
      }
    }
  }

  if (count > 10) { // Ensure enough black pixels to consider it a line
    linePosition = sumX / count; // Average x-coordinate of the line
    Serial.print("Line detected, count: ");
    Serial.print(count);
    Serial.print(", position: ");
    Serial.println(linePosition);
  } else {
    Serial.println("No line detected");
  }

  // Send line position to ESP32
  Serial.println(linePosition);

  // Return frame buffer
  esp_camera_fb_return(fb);
  delay(100);
}
